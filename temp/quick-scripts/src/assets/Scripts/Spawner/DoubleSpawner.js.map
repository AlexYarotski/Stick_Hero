{"version":3,"sources":["assets\\Scripts\\Spawner\\DoubleSpawner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oCAA+B;AAEzB,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAC5C,qCAAoC;AAGpC;IAA2C,iCAAO;IAAlD;QAAA,qEA6BC;QA5BoB,UAAI,GAAW,CAAC,GAAG,CAAC;QAG7B,yBAAmB,GAAW,CAAC,CAAC;QAEhC,aAAO,GAAW,CAAC,CAAC;;IAuBhC,CAAC;IArBU,iCAAS,GAAhB,UAAiB,QAAiB,EAAE,MAAe;QAC/C,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1C,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YAEjB,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YACtE,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAElE,IAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC;YAC/B,IAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC;YAC3B,IAAM,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC;YAEzD,IAAM,UAAU,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAC1C,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,UAAU,CAAC,YAAY,CAAC,gBAAM,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAEjD,OAAO,UAAU,CAAC;SACrB;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAxBD;QADC,QAAQ;8DAC+B;IAJvB,aAAa;QADjC,OAAO;OACa,aAAa,CA6BjC;IAAD,oBAAC;CA7BD,AA6BC,CA7B0C,iBAAO,GA6BjD;kBA7BoB,aAAa","file":"","sourceRoot":"/","sourcesContent":["import Double from \"../Double\";\n\nconst { ccclass, property } = cc._decorator;\nimport { Spawner } from \"./Spawner\";\n\n@ccclass\nexport default class DoubleSpawner extends Spawner {\n    private readonly posY: number = -350;\n\n    @property\n    private appearanceFrequency: number = 3;\n\n    private counter: number = 0;\n\n    public spawnNode(startPos: cc.Vec3, endPos: cc.Vec3): cc.Node {\n        this.counter++;\n        if (this.counter >= this.appearanceFrequency) {\n            this.counter = 0;\n\n            const localStartPos = this.node.parent.convertToNodeSpaceAR(startPos);\n            const localEndPos = this.node.parent.convertToNodeSpaceAR(endPos);\n\n            const startX = localStartPos.x;\n            const endX = localEndPos.x;\n            const randomX = startX + Math.random() * (endX - startX);\n\n            const doubleNode = this.getOrCreateNode();\n            doubleNode.setPosition(randomX, this.posY);\n            doubleNode.getComponent(Double).setSpawner(this);\n\n            return doubleNode;\n        }\n\n        return null;\n    }\n}\n"]}