{"version":3,"sources":["assets\\Scripts\\Spawner\\DoubleSpawner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAoC;AAE9B,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA2C,iCAAO;IAAlD;QAAA,qEAgCC;QA/BoB,UAAI,GAAW,CAAC,GAAG,CAAC;QAG7B,yBAAmB,GAAW,CAAC,CAAC;QAEhC,aAAO,GAAW,CAAC,CAAC;;IA0BhC,CAAC;IAxBU,iCAAS,GAAhB,UAAiB,QAAiB,EAAE,MAAe;QAC/C,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1C,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YAEjB,IAAM,UAAU,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAE1C,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YAC/D,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAE3D,IAAM,MAAM,GAAG,aAAa,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;YAClD,IAAM,IAAI,GAAG,WAAW,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;YAC9C,IAAM,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC;YAEzD,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAE3C,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;YACzB,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;YAE9B,OAAO,UAAU,CAAC;SACrB;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IA3BD;QADC,QAAQ;8DAC+B;IAJvB,aAAa;QADjC,OAAO;OACa,aAAa,CAgCjC;IAAD,oBAAC;CAhCD,AAgCC,CAhC0C,iBAAO,GAgCjD;kBAhCoB,aAAa","file":"","sourceRoot":"/","sourcesContent":["import { Spawner } from \"./Spawner\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class DoubleSpawner extends Spawner {\n    private readonly posY: number = -350;\n\n    @property\n    private appearanceFrequency: number = 3;\n\n    private counter: number = 0;\n\n    public spawnNode(startPos: cc.Vec3, endPos: cc.Vec3): cc.Node {\n        this.counter++;\n        if (this.counter >= this.appearanceFrequency) {\n            this.counter = 0;\n\n            const doubleNode = this.getOrCreateNode();\n\n            const localStartPos = this.node.convertToNodeSpaceAR(startPos);\n            const localEndPos = this.node.convertToNodeSpaceAR(endPos);\n\n            const startX = localStartPos.x + doubleNode.width;\n            const endX = localEndPos.x - doubleNode.width;\n            const randomX = startX + Math.random() * (endX - startX);\n\n            doubleNode.setPosition(randomX, this.posY);\n\n            doubleNode.active = true;\n            doubleNode.parent = this.node;\n\n            return doubleNode;\n        }\n\n        return null;\n    }\n}\n"]}