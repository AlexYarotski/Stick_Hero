{"version":3,"sources":["assets\\Scripts\\UI\\WindowSwitcher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAA8B,2CAAsC;AACpE,wCAAwC;AACxC,wCAAwC;AAElC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA4C,kCAAY;IAAxD;QAAA,qEAgDC;QA9CW,gBAAU,GAAe,IAAI,CAAC;QACtC,wBAAwB;QACxB,yCAAyC;QACzC,wBAAwB;QACxB,yCAAyC;QAEjC,mBAAa,GAAW,IAAI,CAAC;QAC7B,eAAS,GAA0B,IAAI,GAAG,EAAE,CAAC;;IAuCzD,CAAC;IArCa,+BAAM,GAAhB;QACI,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAEM,6BAAI,GAAX,UAA8B,UAAuB;QACjD,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEhD,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YAC7C,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;SAC7B;QAED,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YACvB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;SACrC;QAED,YAAY,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IAEO,kCAAS,GAAjB,UAAoC,UAAuB;QACvD,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAC5D,IAAI,MAAM,EAAE;YACR,OAAO,MAAW,CAAC;SACtB;QACD,MAAM,IAAI,KAAK,CAAC,oBAAkB,UAAU,CAAC,IAAI,gBAAa,CAAC,CAAC;IACpE,CAAC;IAEO,2CAAkB,GAA1B;QACI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,kDAAkD;QAClD,kDAAkD;QAElD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,MAAM;YAC1B,IAAI,MAAM,EAAE;gBACR,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;aAC9B;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IA7CD;QADC,QAAQ,CAAC,oBAAU,CAAC;sDACiB;IAFrB,cAAc;QADlC,OAAO;OACa,cAAc,CAgDlC;IAAD,qBAAC;CAhDD,AAgDC,CAhD2C,EAAE,CAAC,SAAS,GAgDvD;kBAhDoB,cAAc","file":"","sourceRoot":"/","sourcesContent":["import Window from \"./Window\";import MainWindow from \"./MainWindow\";\r\n//import GameWindow from \"./GameWindow\";\r\n//import LoseWindow from \"./LoseWindow\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class WindowSwitcher extends cc.Component {\r\n    @property(MainWindow)\r\n    private mainWindow: MainWindow = null;\r\n    // @property(GameWindow)\r\n    // private gameWindow: GameWindow = null;\r\n    // @property(LoseWindow)\r\n    // private loseWindow: LoseWindow = null;\r\n\r\n    private currentWindow: Window = null;\r\n    private windowMap: Map<Function, Window> = new Map();\r\n\r\n    protected onLoad() {\r\n        this.hideWindowsInChild();\r\n    }\r\n\r\n    public show<T extends Window>(windowType: new () => T): void {\r\n        const windowToShow = this.GetWindow(windowType);\r\n\r\n        if (this.currentWindow && !windowToShow.isPopUp) {\r\n            this.currentWindow.hide();\r\n        }\r\n\r\n        if (!windowToShow.isPopUp) {\r\n            this.currentWindow = windowToShow;\r\n        }\r\n\r\n        windowToShow.show();\r\n    }\r\n\r\n    private GetWindow<T extends Window>(windowType: new () => T): T {\r\n        const window = this.node.getComponentInChildren(windowType);\r\n        if (window) {\r\n            return window as T;\r\n        }\r\n        throw new Error(`Window of type ${windowType.name} not found.`);\r\n    }\r\n\r\n    private hideWindowsInChild() {\r\n        this.windowMap.set(MainWindow, this.mainWindow);\r\n        //this.windowMap.set(GameWindow, this.gameWindow);\r\n        //this.windowMap.set(LoseWindow, this.loseWindow);\r\n\r\n        this.windowMap.forEach((window) => {\r\n            if (window) {\r\n                window.node.active = false;\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}