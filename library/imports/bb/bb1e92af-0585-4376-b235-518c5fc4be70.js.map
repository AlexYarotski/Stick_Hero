{"version":3,"sources":["assets\\Scripts\\GameController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import PlayerController from \"./PlayerController\";\nimport PlatformSpawner from \"./Spawner/PlatformSpawner\";\nimport StickSpawner from \"./Spawner/StickSpawner\";\nimport DoubleSpawner from \"./Spawner/DoubleSpawner\";\nimport Platform from \"./Platform\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GameController extends cc.Component {\n    private readonly Stick_Fallen: string = 'stickFallen';\n    private readonly MOVEMENT_COMPLETE: string = 'movementComplete';\n    private readonly START_GAME: string = 'startGame';\n\n\n    private readonly startPlayerPos: cc.Vec2 = new cc.Vec2(-510, -310);\n    private readonly startPlatformPos: cc.Vec2 = new cc.Vec2(-105, -1100);\n\n    @property(PlayerController)\n    private player: PlayerController = null;\n\n    @property(PlatformSpawner)\n    private platformSpawner: PlatformSpawner = null;\n\n    @property(DoubleSpawner)\n    private doubleSpawner: DoubleSpawner = null;\n\n    private currentStick: cc.Node = null;\n    private currentPlatform: cc.Node = null;\n    private previousPlatform: cc.Node = null;\n\n    protected onLoad() {\n        cc.systemEvent.on(this.Stick_Fallen, this.onStickFallen, this);\n        cc.systemEvent.on(this.MOVEMENT_COMPLETE, this.onMovementComplete, this);\n    }\n\n    protected start() {\n        this.previousPlatform = this.platformSpawner.spawnNode(cc.v2(this.startPlatformPos));\n    }\n\n    protected onDestroy() {\n        cc.systemEvent.off(this.Stick_Fallen, this.onStickFallen, this);\n        cc.systemEvent.off(this.MOVEMENT_COMPLETE, this.onMovementComplete, this);\n    }\n\n    private initGame() {\n        this.resetGame();\n    }\n\n    private resetGame() {\n        this.player.node.setPosition(this.startPlayerPos);\n        this.player.reset();\n\n        this.currentPlatform = this.platformSpawner.spawnNode();\n    }\n\n    private onStickFallen(stick: cc.Node) {\n        this.currentStick = stick;\n\n        const stickEndPosX = this.currentStick.x + this.currentStick.height - this.player.node.width / 2;\n        const stickWorldEndPos = this.currentStick.parent.convertToWorldSpaceAR(\n            cc.v2(this.currentStick.x + this.currentStick.height, this.currentStick.y)\n        );\n\n        const platformWorldPos = this.currentPlatform.parent.convertToWorldSpaceAR(this.currentPlatform.getPosition());\n        const platformStartX = platformWorldPos.x;\n        const platformEndX = platformWorldPos.x + this.currentPlatform.width;\n\n        if (stickWorldEndPos.x >= platformStartX && stickWorldEndPos.x <= platformEndX) {\n            this.player.moveToEndOfPlatform(platformEndX);\n        } else {\n            this.player.moveToEndOfStick(stickEndPosX);\n        }\n    }\n\n    private onMovementComplete() {\n        if(!this.currentPlatform){\n            this.player.reset();\n\n            this.currentPlatform = this.platformSpawner.spawnNode();\n        } else {\n            this.platformSpawner.deactivateNode(this.previousPlatform);\n\n            this.previousPlatform = this.currentPlatform;\n            this.currentPlatform = this.platformSpawner.spawnNode();\n\n            this.player.reset();\n        }\n\n\n        const previousWorldPos = this.previousPlatform.parent.convertToWorldSpaceAR(this.previousPlatform.position);\n        const currentWorldPos = this.currentPlatform.parent.convertToWorldSpaceAR(this.currentPlatform.position);\n        this.doubleSpawner.spawnNode(cc.v3(previousWorldPos.x + this.previousPlatform.width), currentWorldPos);\n    }\n\n    private endGame() {\n        cc.log('Game Over');\n    }\n}\n"]}