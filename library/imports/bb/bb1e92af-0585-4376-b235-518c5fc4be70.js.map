{"version":3,"sources":["assets\\Scripts\\GameController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import StickManager from \"./StickManager\";\n\nconst { ccclass, property } = cc._decorator;\n\nimport PlayerController from \"./PlayerController\";\nimport PlatformSpawner from \"./PlatformSpawner\";\n\n@ccclass\nexport default class GameController extends cc.Component {\n    private readonly Stick_Fallen: string = 'stickFallen';\n    private readonly MOVEMENT_COMPLETE: string = 'movementComplete';\n\n\n    private readonly startPlayerPos: cc.Vec2 = new cc.Vec2(-510, -310);\n    private readonly startPlatformPos: cc.Vec2 = new cc.Vec2(-553, -1100);\n\n    @property(PlayerController)\n    player: PlayerController = null;\n\n    @property(PlatformSpawner)\n    platformSpawner: PlatformSpawner = null;\n\n    private currentStick: cc.Node = null;\n    private platforms: cc.Node[] = [];\n\n    protected onLoad(){\n        cc.systemEvent.on(this.Stick_Fallen, this.onStickFallen, this);\n        cc.systemEvent.on(this.MOVEMENT_COMPLETE, this.onMovementComplete, this);\n    }\n\n    protected start() {\n        this.initGame();\n    }\n\n    protected onDestroy() {\n        cc.systemEvent.off(this.Stick_Fallen, this.onStickFallen, this);\n        cc.systemEvent.off(this.MOVEMENT_COMPLETE, this.onMovementComplete, this);\n    }\n\n    private initGame() {\n        this.resetGame();\n    }\n\n    private resetGame() {\n        this.player.node.setPosition(this.startPlayerPos);\n        this.player.reset();\n\n        this.clearPlatforms();\n\n        const initialPlatform = this.platformSpawner.spawnPlatform(cc.v2(this.startPlatformPos));\n        this.platforms.push(initialPlatform);\n\n        const nextPlatform = this.platformSpawner.spawnPlatform();\n        this.platforms.push(nextPlatform);\n    }\n\n    private clearPlatforms() {\n        this.platforms.forEach(platform => platform.destroy());\n        this.platforms = [];\n    }\n\n    private onStickFallen(stick: cc.Node) {\n        this.currentStick = stick;\n\n        const stickEndPosX = this.currentStick.x + this.currentStick.height - this.player.node.width / 2;\n\n        const stickWorldEndPos = this.currentStick.parent.convertToWorldSpaceAR(\n            cc.v2(this.currentStick.x + this.currentStick.height, this.currentStick.y)\n        );\n\n        const targetPlatform = this.getTargetPlatform(cc.v2(this.player.node.x, this.player.node.y));\n\n        const platformWorldPos = targetPlatform.parent.convertToWorldSpaceAR(targetPlatform.getPosition());\n\n        const platformStartX = platformWorldPos.x;\n        const platformEndX = platformWorldPos.x + targetPlatform.width;\n\n        if (stickWorldEndPos.x >= platformStartX && stickWorldEndPos.x <= platformEndX) {\n            this.player.moveToEndOfPlatform(platformEndX);\n        } else {\n            this.player.moveToEndOfStick(stickEndPosX);\n        }\n    }\n\n    private onMovementComplete(){\n        this.player.reset();\n    }\n\n\n    private getTargetPlatform(playerPosition: cc.Vec2): cc.Node {\n        for (const platform of this.platforms) {\n            if (platform.x > playerPosition.x) {\n                return platform;\n            }\n        }\n        return null;\n    }\n\n    private spawnPlatforms() {\n        const previousPlatform = this.platforms[this.platforms.length - 1];\n        const newPlatform = this.platformSpawner.spawnPlatform(previousPlatform.getPosition());\n        this.platforms.push(newPlatform);\n    }\n\n    private endGame() {\n        cc.log('Game Over');\n    }\n}\n"]}