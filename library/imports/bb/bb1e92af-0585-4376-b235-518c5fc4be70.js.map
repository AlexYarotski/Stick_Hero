{"version":3,"sources":["assets\\Scripts\\GameController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import StickManager from \"./StickManager\";\nimport PlayerController from \"./PlayerController\";\nimport PlatformSpawner from \"./PlatformSpawner\";\nimport StickSpawner from \"./StickSpawner\";\nimport DoubleSpawner from \"./DoubleSpawner\"; // Импорт класса DoubleSpawner\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GameController extends cc.Component {\n    private readonly Stick_Fallen: string = 'stickFallen';\n    private readonly MOVEMENT_COMPLETE: string = 'movementComplete';\n\n    private readonly startPlayerPos: cc.Vec2 = new cc.Vec2(-510, -310);\n    private readonly startPlatformPos: cc.Vec2 = new cc.Vec2(-553, -1100);\n\n    @property(PlayerController)\n    player: PlayerController = null;\n\n    @property(PlatformSpawner)\n    platformSpawner: PlatformSpawner = null;\n\n    @property(StickSpawner)\n    stickSpawner: StickSpawner = null;\n\n    @property(DoubleSpawner)\n    doubleSpawner: DoubleSpawner = null;\n\n    private currentStick: cc.Node = null;\n    private currentPlatform: cc.Node = null;\n    private previousPlatform: cc.Node = null;\n\n    protected onLoad() {\n        cc.systemEvent.on(this.Stick_Fallen, this.onStickFallen, this);\n        cc.systemEvent.on(this.MOVEMENT_COMPLETE, this.onMovementComplete, this);\n    }\n\n    protected start() {\n        this.initGame();\n    }\n\n    protected onDestroy() {\n        cc.systemEvent.off(this.Stick_Fallen, this.onStickFallen, this);\n        cc.systemEvent.off(this.MOVEMENT_COMPLETE, this.onMovementComplete, this);\n    }\n\n    private initGame() {\n        this.resetGame();\n    }\n\n    private resetGame() {\n        this.player.node.setPosition(this.startPlayerPos);\n        this.player.reset();\n\n        this.previousPlatform = this.platformSpawner.spawnNode(cc.v2(this.startPlatformPos));\n        this.currentPlatform = this.platformSpawner.spawnNode();\n    }\n\n    private onStickFallen(stick: cc.Node) {\n        this.currentStick = stick;\n\n        const stickEndPosX = this.currentStick.x + this.currentStick.height - this.player.node.width / 2;\n        const stickWorldEndPos = this.currentStick.parent.convertToWorldSpaceAR(\n            cc.v2(this.currentStick.x + this.currentStick.height, this.currentStick.y)\n        );\n\n        const platformWorldPos = this.currentPlatform.parent.convertToWorldSpaceAR(this.currentPlatform.getPosition());\n        const platformStartX = platformWorldPos.x;\n        const platformEndX = platformWorldPos.x + this.currentPlatform.width;\n\n        if (stickWorldEndPos.x >= platformStartX && stickWorldEndPos.x <= platformEndX) {\n            this.player.moveToEndOfPlatform(platformEndX);\n        } else {\n            this.player.moveToEndOfStick(stickEndPosX);\n        }\n    }\n\n    private onMovementComplete() {\n        if (this.previousPlatform) {\n            this.platformSpawner.deactivateNode(this.previousPlatform);\n        }\n        this.previousPlatform = this.currentPlatform;\n        this.currentPlatform = this.platformSpawner.spawnNode();\n\n        this.player.reset();\n\n        if (this.doubleSpawner) {\n            this.doubleSpawner.spawnDouble(this.previousPlatform, this.currentPlatform);\n        }\n    }\n\n    private endGame() {\n        cc.log('Game Over');\n    }\n}\n"]}