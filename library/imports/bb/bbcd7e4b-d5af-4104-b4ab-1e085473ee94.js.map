{"version":3,"sources":["assets\\Scripts\\PlatformSpawner.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PlatformSpawner extends cc.Component {\n    private readonly posY: number = -1100;\n\n    @property(cc.Prefab)\n    platformPrefab: cc.Prefab = null;\n\n    @property\n    minWidth: number = 50;\n\n    @property\n    maxWidth: number = 200;\n\n    @property\n    minXOffset: number = 100;\n\n    @property\n    maxXOffset: number = 400;\n\n    @property\n    platformAppearTime: number = 0.5;\n\n    private lastPlatform: cc.Node = null;\n\n    private platformPool: cc.Node[] = [];\n\n    public spawnPlatform(previousPlatformPosition?: cc.Vec2): cc.Node {\n        const newPlatform = this.getOrCreatePlatform();\n\n        if (previousPlatformPosition) {\n            newPlatform.setPosition(cc.v2(previousPlatformPosition.x, this.posY));\n\n            newPlatform.active = true;\n        } else {\n\n            this.setRandomPlatformAttributes(newPlatform);\n        }\n\n        this.lastPlatform = newPlatform;\n\n        return newPlatform;\n    }\n\n    public deactivatePlatform(platform: cc.Node) {\n        platform.setPosition(cc.v2(platform.x, this.posY * 2));\n        platform.active = false;\n        this.platformPool.push(platform);\n    }\n\n    private getOrCreatePlatform(): cc.Node {\n        if (this.platformPool.length > 0) {\n            const reusedPlatform = this.platformPool.pop();\n            return reusedPlatform;\n        }\n        const newPlatform = cc.instantiate(this.platformPrefab);\n        this.node.addChild(newPlatform);\n        return newPlatform;\n    }\n\n    private setRandomPlatformAttributes(platform: cc.Node) {\n        const platformWidth = this.minWidth + Math.random() * (this.maxWidth - this.minWidth);\n        platform.width = platformWidth;\n\n        const offsetX = this.minXOffset + Math.random() * (this.maxXOffset - this.minXOffset);\n        const newPositionX = this.lastPlatform ? this.lastPlatform.x + this.lastPlatform.width + offsetX : 0;\n\n        platform.setPosition(cc.v2(newPositionX, this.posY * 2));\n\n        platform.active = true;\n\n        cc.tween(platform)\n            .to(this.platformAppearTime, { position: cc.v3(newPositionX, this.posY) }, { easing: 'cubicOut' })\n            .start();\n    }\n}"]}